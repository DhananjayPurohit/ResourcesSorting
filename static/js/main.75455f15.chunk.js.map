{"version":3,"sources":["SearchElements.js","SearchResults.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["useStylesSR","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","SearchElement","props","data","classes","CardContent","Button","size","color","style","textTransform","full_name","Typography","className","description","variant","verticalAlign","stargazers_count","language","updated_at","datalist","SearchResult","useState","checked","setChecked","date_diff","Sdate","Ldate","Date","getTime","Score","diff_in_pushed_updated","created_at","diff_in_last_update","forks_count","Sort","sort","a","b","selEl","console","log","SElements","map","info","key","id","ReactDOM","render","document","getElementById","Checkbox","onChange","event","target","index","findIndex","i","splice","push","score","handleChange","inputProps","Divider","useStyles","theme","paper","marginTop","spacing","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","form","width","submit","Search","search","setSearch","txt","setTxt","Grid","container","item","xs","Container","component","maxWidth","CssBaseline","Avatar","noValidate","TextField","required","fullWidth","label","name","value","autoComplete","autoFocus","type","onClick","preventDefault","fetch","then","response","json","Sresults","items","App","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.75455f15.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport LibraryBooksOutlinedIcon from \"@material-ui/icons/LibraryBooksOutlined\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport StarIcon from \"@material-ui/icons/Star\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStylesSR = makeStyles({\r\n    root: {\r\n      minWidth: 500,\r\n    },\r\n    bullet: {\r\n      display: \"inline-block\",\r\n      margin: \"0 2px\",\r\n      transform: \"scale(0.8)\",\r\n    },\r\n    title: {\r\n      fontSize: 12,\r\n    },\r\n    pos: {\r\n      marginBottom: 12,\r\n    },\r\n  });\r\n\r\n\r\nexport default function SearchElement(props){\r\n    const data = props.data;\r\n  \r\n    const classes = useStylesSR();\r\n\r\n    return (\r\n      <CardContent>\r\n          <LibraryBooksOutlinedIcon fontSize=\"small\" />\r\n          <Button size=\"large\" color=\"primary\" style={{ textTransform: \"none\" }}>\r\n            {data.full_name}\r\n          </Button>\r\n          <Typography className={classes.pos} color=\"textSecondary\">\r\n            {data.description}\r\n          </Typography>\r\n          <Typography color=\"textSecondary\" variant=\"caption\">\r\n            <StarIcon fontSize=\"small\" style={{ verticalAlign: \"bottom\" }} />\r\n            {data.stargazers_count} {data.language} {\"Updated on \"}\r\n            {data.updated_at}\r\n          </Typography>\r\n        </CardContent>\r\n    );\r\n  }","import React, { useState } from \"react\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport LibraryBooksOutlinedIcon from \"@material-ui/icons/LibraryBooksOutlined\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport StarIcon from \"@material-ui/icons/Star\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SearchElement from \"./SearchElements\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nconst useStylesSR = makeStyles({\r\n    root: {\r\n      minWidth: 500,\r\n    },\r\n    bullet: {\r\n      display: \"inline-block\",\r\n      margin: \"0 2px\",\r\n      transform: \"scale(0.8)\",\r\n    },\r\n    title: {\r\n      fontSize: 12,\r\n    },\r\n    pos: {\r\n      marginBottom: 12,\r\n    },\r\n  });\r\n  \r\n  var datalist = [];\r\n  \r\nexport default function SearchResult(props) {\r\n    const classes = useStylesSR();\r\n    const data = props.data;\r\n  \r\n    const [checked, setChecked] = useState(false);\r\n  \r\n    const handleChange = (event, data) => {\r\n      setChecked(event.target.checked);\r\n      if (!checked) {\r\n        datalist.push({info: data,score: Score(data)});\r\n      } else {\r\n        var index = datalist.findIndex((i) => i.info.id == data.id);\r\n        if (index!=-1)\r\n        datalist.splice(index, 1);\r\n      }\r\n      Sort(datalist);\r\n      selEl();\r\n    };\r\n  \r\n    const date_diff = (Sdate,Ldate) => {\r\n      var diff_in_time=(new Date(Ldate)).getTime()-(new Date(Sdate)).getTime();\r\n      var diff_in_days=diff_in_time/(1000*3600*24);\r\n      return diff_in_days;\r\n    }\r\n\r\n    const Score = (data) => {\r\n      var diff_in_pushed_updated=date_diff(data.created_at, data.updated_at);\r\n      var diff_in_last_update=date_diff(data.updated_at, new Date());\r\n      var score=(data.stargazers_count*0.01+data.forks_count*0.01+diff_in_pushed_updated*0.01)/diff_in_last_update;\r\n      return score;\r\n    }\r\n\r\n    const Sort = (datalist) => {\r\n      datalist.sort(function(a,b){\r\n        return b['score']-a['score'];\r\n      })\r\n    }\r\n\r\n    const selEl = () => {\r\n      console.log(datalist);\r\n      const SElements = datalist.map((data) => <SearchElement data={data.info} key={data.info.id}/>);\r\n      ReactDOM.render(SElements, document.getElementById(\"selected-results\"));\r\n    };\r\n    \r\n    return (\r\n      <div className={classes.root}>\r\n        <CardContent>\r\n          <Checkbox\r\n            checked={checked}\r\n            onChange={(event) => handleChange(event, data)}\r\n            inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n            key={data.id}\r\n          />\r\n          <LibraryBooksOutlinedIcon fontSize=\"small\" />\r\n          <Button size=\"large\" color=\"primary\" style={{ textTransform: \"none\" }}>\r\n            {data.full_name}\r\n          </Button>\r\n          <Typography className={classes.pos} color=\"textSecondary\">\r\n            {data.description}\r\n          </Typography>\r\n          <Typography color=\"textSecondary\" variant=\"caption\">\r\n            <StarIcon fontSize=\"small\" style={{ verticalAlign: \"bottom\" }} />\r\n            {data.stargazers_count} {data.language} {\"Updated on \"}\r\n            {data.updated_at}\r\n          </Typography>\r\n        </CardContent>\r\n        <Divider />\r\n      </div>\r\n    );\r\n  }","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SearchResult from \"./SearchResults\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function Search() {\r\n  const classes = useStyles();\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const [txt, setTxt] = useState(\"\");\r\n\r\n  const handleSearch = (event) => {\r\n    event.preventDefault();\r\n    console.log(search);\r\n    // `https://api.github.com/search/repositories?q=${search}&sort=stars&order=desc`\r\n    fetch(`https://api.github.com/search/repositories?q=${search}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        const Sresults = data.items.map((data) => <SearchResult data={data} key={data.id}/>);\r\n        ReactDOM.render(Sresults, document.getElementById(\"search-results\"));\r\n      });\r\n      setTxt(\"Sorted Resources\");\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={6}>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}></Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Search Resources\r\n            </Typography>\r\n            <form className={classes.form} noValidate>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"Search\"\r\n                label=\"Search\"\r\n                name=\"search\"\r\n                value={search}\r\n                onChange={(event) => setSearch(event.target.value)}\r\n                autoComplete=\"search\"\r\n                autoFocus\r\n              />\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n                onClick={handleSearch}\r\n              >\r\n                Search\r\n              </Button>\r\n            </form>\r\n            <div id=\"search-results\"></div>\r\n          </div>\r\n        </Container>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <div className={classes.paper}>\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                {txt}\r\n              </Typography>\r\n            <div id=\"selected-results\"></div>\r\n          </div>\r\n        </Container>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from 'react';\nimport Search from './Search';\n\nfunction App() {\n  return (\n    <div>\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}